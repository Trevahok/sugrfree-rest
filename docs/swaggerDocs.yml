openapi: 3.0.0
basePath: v1
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/Trevahok/SugrFree/1.0.0'
info:
  description: AI-based Dietary Management for Diabetes patients
  version:  1.0.0 
  title: SugrFree
  contact:
    email: vighneshss@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /foods:
    get:
      tags:
        - developers
      summary: Query and list foods
      operationId: listFoodsView
      description: |
        By passing in the appropriate options, you can search for
        available food in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Food'
        '400':
          description: bad input parameter
      
    post:
      tags:
        - admins
      summary: Add Food
      operationId: createFoodView
      description: Adds a food to the system
      responses:
        '201':
          description: Food created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: Food already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
        description: Food Item to add
    
    put:
      tags:
        - admins
      summary: Update the attributes of a food 
      responses:
        200: 
          description: Updated Food object
  /user:
    post:
      tags:
      -  user 
      summary:  Create user 
      description:  This can only be done by the logged in user. 
      operationId:  createUser 
      produces:
      -  application/xml 
      -  application/json 
      parameters:
      - in:  body 
        name:  body 
        description:  Created user object 
        required: true
        schema:
          $ref:  #/components/schemas/User 
      responses:
        default:
          description:  successful operation 
  /user/login:
    post:
      tags:
      -  user 
      summary:  Logs user into the system 
      operationId:  userLoginView
      parameters:
      - name:  username 
        in:  query 
        description:  The user name for login 
        required: true
        type:  string 
      - name:  password 
        in:  query 
        description:  The password for login in clear text 
        required: true
        type:  string 
      responses:
        200:
          description:  successful operation 
          schema:
            type:  string 
          headers:
            X-Rate-Limit:
              type:  integer 
              format:  int32 
              description:  calls per hour allowed by the user 
            X-Expires-After:
              type:  string 
              format:  date-time 
              description:  date in UTC when token expires 
        400:
          description:  Invalid username/password supplied 
  /user/logout:
    get:
      tags:
      -  user 
      summary:  Logs out current logged in user session 
      description:   
      operationId:  logoutUser 
      produces:
      -  application/json 
      parameters: []
      responses:
        default:
          description:  successful operation 
  /user/{username}:
    get:
      tags:
      -  user 
      summary:  Get user by user name 
      description:   
      operationId:  getUserByName 
      produces:
      -  application/xml 
      -  application/json 
      parameters:
      - name:  username 
        in:  path 
        description:  The name that needs to be fetched. Use user1 for testing.  
        required: true
        type:  string 
      responses:
        200:
          description:  successful operation 
          schema:
            $ref:  #/components/schemas/User 
        400:
          description:  Invalid username supplied 
        404:
          description:  User not found 
    put:
      tags:
      -  user 
      summary:  Updated user 
      description:  This can only be done by the logged in user. 
      operationId:  updateUser 
      produces:
      -  application/xml 
      -  application/json 
      parameters:
      - name:  username 
        in:  path 
        description:  name that need to be updated 
        required: true
        type:  string 
      - in:  body 
        name:  body 
        description:  Updated user object 
        required: true
        schema:
          $ref: '#/components/schemas/User'
      responses:
        400:
          description:  Invalid user supplied 
        404:
          description:  User not found 
    delete:
      tags:
      -  user 
      summary:  Delete user 
      description:  This can only be done by the logged in user. 
      operationId:  deleteUser 
      produces:
      -  application/xml 
      -  application/json 
      parameters:
      - name:  username 
        in:  path 
        description:  The name that needs to be deleted 
        required: true
        type:  string 
      responses:
        400:
          description:  Invalid username supplied 
        404:
          description:  User not found 
# ------------------------------------------------
# components 
components:
  schemas:
    User:
      type:  object 
      required:
        - username
        - firstName
        - email
        - password
        - role
      properties:
        id:
          type:  integer 
          format:  int64 
        username:
          type:  string 
        firstName:
          type:  string 
        lastName:
          type:  string 
        email:
          type:  string 
        password:
          type:  string 
        phone:
          type:  string 
        role:
          type:  integer 
          format:  int32 
          description:  User Role/Status in the system 
    Food:
      type: object
      required:
        - name
        - cuisine
        - releaseDate
      properties:
        id:
          type: string
          format: uuid
          example: d290f1eed701748f0851
        name:
          type: string
          example: Garlic Bread
        createdDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        modifiedDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        cuisine:
          type: string
          example: Indian
    Ingredient:
      type: object
      required: 
        - name
      properties:
        name:
          type: string
          example: Chilli